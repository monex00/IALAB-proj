rl -s learning on # enable RL
indifferent-selection --epsilon-greedy # use epsilon-greedy decision making
indifferent-selection --epsilon 0.1 # 10% deviation from greedy

##
#Si richiede di implementare un agente intelligente sviluppato 
#tramite l’architettura cognitiva SOAR in grado di risolvere il seguente problema (per comodità 
#nominato “ESCAPE”) tramite apprendimento per rinforzo (reinforcement learning). 
#L’agente SOAR è prigioniero in un ambiente dove l’unica via d’uscita è una finestra in vetro posta a 3,5 
#metri di altezza (l’agente è un robot di altezza 150 cm). La finestra in vetro è blindata ma ha un punto 
#debole alle estremità. Questo vuol dire che, se colpita con precisione alle estremità, il vetro si può 
#frantumare. Tuttavia l’agente all’inizio della sua esecuzione non lo sa e deve apprendere questa 
#conoscenza. 
#L’agente ha a disposizione i seguenti oggetti che potrebbero tornargli utili per realizzare il suo obiettivo: 
#una molla, una rametto in legno, ciottoli e pietre. Due tronchi d’albero dello stesso diametro da 1 metro 
#di altezza ciascuno. L’agente può decidere di creare nuovi oggetti a partire da quelli che ha a 
#disposizione ma parte da una tabula rasa (non sa quale combinazione va bene). Nel corso dei suoi 
#tentativi di interazione imparerà i seguenti rinforzi: (Molla + Rametto di legno) = +1 (Pietre + Rametto 
#di legno) =-1 (Pietre + Molla) = -1 Altre possibili rinforzi frutto della vostra fantasia possono essere 
#inseriti nel programma
##

# 1. definire un agente che ha a disposizione i seguenti oggetti:
#   - molla
#   - rametto in legno
#   - ciottoli
#   - pietre
#   - due tronchi d'albero dello stesso diametro da 1 metro di altezza ciascuno

# 2. l'agente deve apprendere che:
#   - (molla + rametto di legno) = +1
#   - (pietre + rametto di legno) = -1
#   - (pietre + molla) = -1

sp {propose*initialize*escape
    (state <s> ^superstate nil
               -^name)
-->
    (<s> ^operator <o> +)
    (<o> ^name init-escape)
}

sp {apply*init-escape
    (state <s> ^operator.name init-escape)
-->
    (<s> ^name escape
         ^phase combination
         ^combination <c1> <c2> <c3> #<c4> <c5> <c6> <c7> <c8> <c9> <c10> <c11>
         ^chosedCombination nil
         ^chosedThrow nil
         ^throws <t1> <t2>
         ^window <w>
         )
    
    #creo le combinazioni per ogni oggetto
    (<c1> ^name molla-rametto
          ^reward 1)
    (<c2> ^name pietre-rametto
          ^reward -1)
    (<c3> ^name pietre-molla
          ^reward -1)
    #(<c4> ^name tronco1-tronco2
    #      ^reward -1)
    #(<c5> ^name ciottoli-tronco1
    #      ^reward -1)
    #(<c6> ^name pietre-tronco1
    #      ^reward -1)
    #(<c7> ^name ciottoli-tronco2
    #        ^reward -1)
    #(<c8> ^name pietre-tronco2
    #    ^reward -1)
    #(<c9> ^name rametto-tronco2
    #    ^reward -1)
    #(<c10> ^name molla-tronco2
    #    ^reward -1)
    #(<c11> ^name pietre-ciottoli
    #    ^reward -1)
    (<t1> ^name border ^reward 1)
    (<t2> ^name center ^reward -1)
    (<w> ^status intact ^waeakness border)
}

sp {escape*propose*combination
    (state <s> ^name escape
               ^phase combination
               ^combination <c>)
    (<c> ^name <comb-name>)
-->
    (<s> ^operator <o> +)
    (<o> ^name propose-combination
         ^comb-name <comb-name>)
}


sp {escape*rl*molla-rametto
    (state <s> ^name escape
               ^phase combination
               ^operator <op> +)
    (<op> ^name propose-combination
          ^comb-name molla-rametto)
-->
    (<s> ^operator <op> = 0)
}

sp {escape*rl*pietre-rametto
    (state <s> ^name escape
               ^phase combination
               ^operator <op> +)
    (<op> ^name propose-combination
          ^comb-name pietre-rametto)
-->
    (<s> ^operator <op> = 0)
}

sp {escape*rl*pietre-molla
    (state <s> ^name escape
               ^phase combination
               ^operator <op> +)
    (<op> ^name propose-combination
          ^comb-name pietre-molla)
-->
    (<s> ^operator <op> = 0)
}

# DOESN'T WORK  GENERIC VERSION OF PREVIOUS RULE 
##
#sp {escape*rl*generic
#    (state <s> ^name escape
#               ^operator <op> +)
#    (<op> ^name propose-combination
#          ^comb-name <comb-name>)
#-->
#    (<s> ^operator <op> = 0)
#}
##

sp {apply*combination
    (state <s> ^operator <op>
               ^phase combination)
    (<op> ^name propose-combination
          ^comb-name <comb-name>)
-->
    (<s> ^chosedCombination <comb-name> ^phase combination - action)
    
    (write (crlf) |CHOSED: | <comb-name>)
}


sp {elaborate*reward-combination
    (state <s> ^name escape
               ^phase action
               ^reward-link <r>
               ^chosedCombination <c-name>
               ^combination <c>)
    (<c> ^name <c-name> ^reward <c-reward>)
-->
    (<r> ^reward <rr>)
    (<rr> ^value <c-reward>)
    (write (crlf) |ELABORO REWARD COMB|)

}




#START THROW PHASE

sp {escape*propose*throws
    (state <s> ^name escape
               ^phase action
               ^throws <t>)
    (<t> ^name <throw-name>)
-->
    (<s> ^operator <o> +)
    (<o> ^name propose-throw
         ^throw-name <throw-name>)
}

sp {escape*rl*border
    (state <s> ^name escape
               ^phase action
               ^operator <op> +)
    (<op> ^name propose-throw
          ^throw-name border)
-->
    (<s> ^operator <op> = 0)
}

sp {escape*rl*center
    (state <s> ^name escape
               ^phase action
               ^operator <op> +)
    (<op> ^name propose-throw
          ^throw-name center)
-->
    (<s> ^operator <op> = 0)
}

sp {apply*throw
    (state <s> ^operator <op>
               ^phase action)
    (<op> ^name propose-throw
           ^throw-name <throw-name>)
-->
    (<s> ^chosedThrow <throw-name> ^phase action - final)
    
    (write (crlf) |CHOSED throw: | <throw-name>)
}

sp {elaborate*reward-throw
    (state <s> ^name escape
               ^phase final
               ^reward-link <r>
               ^chosedThrow <t-name>
               ^throws <t>)
    (<t> ^name <t-name> ^reward <t-reward>)
-->
    (<r> ^reward <rr>)
    (<rr> ^value <t-reward>)
    (write (crlf) |ELABORO REWARD THROW|)
}

sp {change*window*status
    (state <s> ^name escape
               ^phase final
               ^window <w>
               ^chosedThrow <t>)
    (<w> ^status intact ^waeakness <t>)
-->
    (<w> ^status broken)
}

sp {elaborate*done
    (state <s> ^name escape
               ^phase final)
-->
    (halt)
}
